<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
		<!ENTITY % darktable_dtd SYSTEM "../../dtd/darktable.dtd">
		%darktable_dtd;
		]>
<sect2 status="final" id="color_management">

  <title>Color management</title>

  <indexterm>
    <primary>color management</primary>
  </indexterm>

  <para>
    darktable employs a fully color managed workflow:
    <itemizedlist>

      <listitem><para>
        Input color specifications are taken from embedded or user supplied
        <ulink url="https://en.wikipedia.org/wiki/ICC_profile">ICC profiles</ulink>
        or, in the case of raw files, from a library of camera specific color matrices.
      </para></listitem>

      <listitem><para>
        darktable automatically reads the display profile of your monitor (if properly
        configured) for an accurate color rendition on screen. Multi-screen setups are fully
        supported as long as a system service such as
        <ulink url="https://www.freedesktop.org/software/colord/intro.html"><emphasis>colord</emphasis></ulink>
        is in place and properly set up to inform darktable about the correct monitor profile.
      </para></listitem>

      <listitem><para>
        Output files can be encoded in one of darktable's built-in profiles, including
        <ulink url="http://en.wikipedia.org/wiki/SRGB">sRGB</ulink>,
        <ulink url="https://en.wikipedia.org/wiki/Adobe_RGB_color_space">Adobe</ulink>,
        <ulink url="https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space">ProPhoto</ulink>,
        <ulink url="https://en.wikipedia.org/wiki/Rec._2020">Rec. 2020</ulink>,
        <ulink url="https://en.wikipedia.org/wiki/Rec._709">Rec. 709</ulink>
        and other standard RGB color spaces, or into a color space supplied by the user as
        an ICC profile.
      </para></listitem>

    </itemizedlist>
  </para>

  <sect3 status="final" id="display_profile">

    <title>Display profile</title>

    <indexterm>
      <primary>color management</primary>
      <secondary>display profile</secondary>
    </indexterm>

    <indexterm>
      <primary>monitor profile</primary>
    </indexterm>

    <indexterm>
      <primary>display profile</primary>
    </indexterm>

    <para>
      In order for darktable to accurately render colors on screen it needs to find the correct
      display profile of your monitor. In general this requires your monitor to be properly
      calibrated and profiled, and it needs the profile to be correctly installed on your
      system. darktable queries your X display server's <emphasis>xatom</emphasis> as well as the
      system service <emphasis>colord</emphasis> (if available) for the right profile. If needed
      you can enforce a specific method in the <emphasis>miscellaneous</emphasis> section of the
      preferences dialog (see <xref linkend="miscellaneous"/>).
    </para>

    <para>
      To investigate your display profile configuration you can call the
      <filename>darktable-cmstest</filename> binary (Linux only) which prints out useful information like
      profile name per monitor and tells you if the system is correctly configured (see
      <xref linkend="darktable_cmstest_commandline_parameters"/>).
    </para>

    <para>
      In rare cases you may need to manually select the display profile. This is possible from
      the softproof and gamut check option dialogs in the darkroom view (see
      <xref linkend="softproof"/> and <xref linkend="gamutcheck"/>), and the display profile
      dialog in the lighttable view (see <xref linkend="lighttable_overview"/>).
    </para>

  </sect3>

  <sect3 status="final" id="rendering_method">

    <title>Rendering method</title>

    <indexterm>
      <primary>color management</primary>
      <secondary>rendering method</secondary>
    </indexterm>

    <indexterm>
      <primary>LittleCMS2</primary>
    </indexterm>

    <para>
      darktable can render colors either with its internal algorithms or by using the external
      library <ulink url="http://www.littlecms.com/"><emphasis>LittleCMS2</emphasis></ulink>.
      darktable's internal method is by an order of magnitude faster than the external one. The
      external option gives you a choice of the rendering intent and might offer a slightly
      higher accuracy in some cases.
    </para>

    <para>
      A configuration parameter <quote>always use LittleCMS 2 to apply output color
      profile</quote> in the <emphasis>processing</emphasis> section of the preferences
      dialog (see <xref linkend="processing"/>) defines which method is used. Note, however,
      that if the given ICC is LUT-based, or contains both a LUT and a matrix, darktable
      will use LittleCMS 2 to render the colors regardless of that configuration parameter's
      value.
    </para>

  </sect3>

  <sect3 status="final" id="rendering_intent">

    <title>Rendering intent</title>

    <indexterm>
      <primary>color management</primary>
      <secondary>rendering intent</secondary>
    </indexterm>

    <indexterm>
      <primary>rendering intent</primary>
    </indexterm>

    <para>
      If rendering with LittleCMS2 is activated (see <xref linkend="rendering_method"/>) you can
      define how out-of-gamut colors are handled when converting between color spaces. A
      selection box in the export panel (see <xref linkend="export_selected"/>), the output
      color profile module (see <xref linkend="output_color_profile"/>), and the soft proof
      option (see <xref linkend="softproof"/>) gives you a choice of the following rendering
      intents:
      <informaltable frame="none" width="80%">
        <tgroup cols="2" colsep="0" rowsep="0">
          <colspec colwidth='4*'/>
          <colspec colwidth='6*'/>
          <tbody>
            <row>
              <entry>
                <emphasis>perceptual</emphasis>
              </entry>
              <entry>
                Suited to pictures as it maintains the relative position of colors. This is
                usually the best choice.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>relative colorimetric</emphasis>
              </entry>
              <entry>
                Out-of-gamut colors are converted to colors having the same lightness, but
                different saturation. Other colors remain unmodified.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>saturation</emphasis>
              </entry>
              <entry>
                Saturation is kept but lightness is slightly changed.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>absolute colorimetric</emphasis>
              </entry>
              <entry>
                Keep the white point.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

  </sect3>

  <sect3 status="final" id="darktable_color_spaces">

    <title>darktable's color spaces</title>

    <indexterm>
      <primary>color spaces</primary>
    </indexterm>

    <para>
      darktable's input images are either RGB files (like JPEGs or TIFFs) or camera
      raws&nbsp;&ndash; both represent colors by a combination of red, green and blue. Most
      of the actual image processing takes place in a large RGB "working profile" space, with
      some (mostly older) modules internally working in the
      <ulink url="https://en.wikipedia.org/wiki/CIELAB_color_space">CIELAB color space</ulink>.
      The final output of the image processing pipeline is in an RGB space shaped for either
      the monitor display or the output file.
    </para>

    <para>
      This process implies that the pixelpipe has two fixed color conversion steps:
      <link linkend="input_color_profile"><emphasis>input color profile</emphasis></link> and
      <link linkend="output_color_profile"><emphasis>output color profile</emphasis></link>. In
      addition there is the <link linkend="demosaic"><emphasis>demosaic</emphasis></link> step
      for raw images, where the colors of each pixel are reconstructed by interpolation.
    </para>

    <para>
      Each module has a position in the pixelpipe which tells you which color space the
      module lives in:
    </para>

    <para>
      <informaltable frame="none" width="80%">
        <tgroup cols="3" colsep="0" rowsep="0">
          <colspec colwidth="3.5*"/>
          <colspec colwidth="0.5*"/>
          <colspec colwidth="6*"/>
          <tbody>
            <row>
              <entry>
                up to <emphasis>demosaic</emphasis>
              </entry>
              <entry></entry>
              <entry>
                Image is in raw data format with only latent colors. Each pixel carries
                lightness and color information for only one base color. Please mind that some
                of the modules in this part can also act on non-raw input images in RGB format
                with full information on all three color channels.
              </entry>
            </row>
            <row>
              <entry>
                between <emphasis>demosaic</emphasis> and <emphasis>input color
                profile</emphasis>
              </entry>
              <entry></entry>
              <entry>
                Image is in RGB format within the color space of the specific camera or input
                file.
              </entry>
            </row>
            <row>
              <entry>
                between <emphasis>input color profile</emphasis> and <emphasis>output color
                profile</emphasis>
              </entry>
              <entry></entry>
              <entry>
                Image is in the space defined by the selected working profile (linear Rec2020 RGB by
                default). As darktable processes images in 4x32-bit floating point buffers, we can
                handle large working color spaces without risking banding or tonal breaks.
              </entry>
            </row>
            <row>
              <entry>
                after <emphasis>output color profile</emphasis>
              </entry>
              <entry></entry>
              <entry>
                Image is in RGB format as defined by the selected display or output ICC profile.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

  </sect3>

  <sect3 status="final" id="unbounded_colors">

    <title>Unbounded colors</title>

    <indexterm>
      <primary>unbounded colors</primary>
    </indexterm>

    <para>
      Theoretically the individual components of color data are confined to certain minimum and
      maximum levels. As an example the intensity of an individual red, green or blue color
      channel in RGB can be anything in the range between 0% and 100% (or between 0.0 and 1.0).
      Likewise the L channel in Lab can be anything between 0 (pure black) and 100 (pure white).
    </para>

    <para>
      In practice sometimes the image processing steps in darktable's modules can lead to values
      which lie outside of these confined ranges. In fact even the well established color
      matrices, which convert from RGB to Lab, may sometimes produce pixels with negative
      L values.
    </para>

    <para>
      Pixels with these kind of values are said to have <quote>unbounded colors</quote>. One
      could <emphasis>clamp</emphasis> (i.e. confine) those values to the allowed range at every
      processing step. However, it has been found that it is much preferred and less prone to
      artifacts to not clamp in-between unbounded colors, but treat them just like any other
      color data.
    </para>

    <para>
      In darktable there is no technical requirement for clamping; due to the fact that we are
      using floating point arithmetics for all processing steps, unbounded values can be passed
      along like any other value until the final color conversion module makes sure that they
      are transferred into the most reasonable color within the selected output color space.
      Therefore darktable avoids clamping as far as the underlying algorithms allow.
    </para>

  </sect3>

  <sect3 status="final" id="possible_color_artifacts">

    <title>Possible color artifacts</title>

    <indexterm>
      <primary>artifact mitigation</primary>
      <secondary>blue light sources</secondary>
    </indexterm>

    <indexterm>
      <primary>artifact mitigation</primary>
      <secondary>black pixels</secondary>
    </indexterm>

    <indexterm>
      <primary>gamut clipping</primary>
    </indexterm>

    <para>
      That said there are some infrequent situations which still can lead to problematic results
      unless the user takes some action. Some modules in Lab color space, like
      <link linkend="levels"><emphasis>levels</emphasis></link> and
      <link linkend="monochrome"><emphasis>monochrome</emphasis></link>, need to rely on the
      fact that the L channels carries all lightness information and the a and b channels purely
      represent chroma and hue. Unbounded colors with negative L values are especially
      problematic to these modules and can lead to black pixel artifacts.
    </para>

    <para>
      It has been found that highly saturated blue light sources in the image frame are likely
      candidates for pixels with negative L values. If you are engaged in stage photography you
      should pay close attention to such lights appearing in images.
    </para>

    <para>
      In order to mitigate that issue the <emphasis>input color profile</emphasis> module (see
      <xref linkend="input_color_profile"/>) has a <emphasis>gamut clipping</emphasis> option.
      It is off by default but can be activated in case you observe artifacts. Depending on the
      settings, colors get confined to one of the offered RGB gamuts. In effect black pixel
      artifacts are prevented at the costs of losing some color dynamics. See
      <xref linkend="input_color_profile"/> for an example.
    </para>

  </sect3>

</sect2>
