name: CI

concurrency: 
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
      - darktable-**
    paths-ignore:
        - "po/**"
        - "packaging/**"
        - "data/latex/**"
        - "data/lua/**"
        - "data/pixmaps/**"
        - "data/pswp/**"
        - "data/style/**"
        - "data/themes/**"
        - "data/watermarks/**"
        - "**.md"
  pull_request:
    branches:
      - master
    paths-ignore:
        - "po/**"
        - "packaging/**"
        - "data/latex/**"
        - "data/lua/**"
        - "data/pixmaps/**"
        - "data/pswp/**"
        - "data/style/**"
        - "data/themes/**"
        - "data/watermarks/**"
        - "**.md"

permissions:
  contents: read

jobs:

  Linux:
    name: Linux.${{ matrix.os.code }}.${{ matrix.compiler.compiler }}.${{ matrix.target }}.${{ matrix.btype }}.${{ matrix.generator }}
    runs-on: ${{ matrix.os.label }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - { label: ubuntu-latest, code: latest }
        compiler:
          - { compiler: GNU10,  CC: gcc-10,   CXX: g++-10,     packages: gcc-10 g++-10 }
          - { compiler: GNU11,  CC: gcc-11,   CXX: g++-11,     packages: gcc-11 g++-11 }
          - { compiler: GNU12,  CC: gcc-12,   CXX: g++-12,     packages: gcc-12 g++-12 }
          - { compiler: LLVM14, CC: clang-14, CXX: clang++-14, packages: clang-14 libomp-14-dev libclang-common-14-dev llvm-14-dev clang++-14 libc++-14-dev libc++1-14 libc++abi1-14 lld-14}
        btype:
          - Release
        target:
          - build
          - nofeatures_nosse
        generator:
          #- Unix Makefiles
          - Ninja
    env:
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: ${{ matrix.generator }}
      TARGET: ${{ matrix.target }}
      DARKTABLE_CLI: ${{ github.workspace }}/install/bin/darktable-cli
    steps:
      - name: Install compiler ${{ matrix.compiler.compiler }}
        run: |
          # Remove azure mirror because it is unreliable and sometimes unpredictably leads to failed CI
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo add-apt-repository -y universe
          sudo add-apt-repository -y multiverse
          sudo apt-get update
          sudo apt-get -y install \
            ${{ matrix.compiler.packages }}
      - name: Install Base Dependencies
        run: |
          sudo apt-get -y install \
            build-essential \
            appstream-util \
            desktop-file-utils \
            gettext \
            git \
            gdb \
            intltool \
            libatk1.0-dev \
            libavif-dev \
            libcairo2-dev \
            libcolord-dev \
            libcolord-gtk-dev \
            libcmocka-dev \
            libcups2-dev \
            libcurl4-gnutls-dev \
            libexiv2-dev \
            libgdk-pixbuf2.0-dev \
            libglib2.0-dev \
            libgmic-dev \
            libgphoto2-dev \
            libgraphicsmagick1-dev \
            libgtk-3-dev \
            libheif-dev \
            libjpeg-dev \
            libjson-glib-dev \
            liblcms2-dev \
            liblensfun-dev \
            liblua5.4-dev \
            libopenexr-dev \
            libopenjp2-7-dev \
            libosmgpsmap-1.0-dev \
            libpango1.0-dev \
            libpng-dev \
            libportmidi-dev \
            libpugixml-dev \
            librsvg2-dev \
            libsaxon-java \
            libsdl2-dev \
            libsecret-1-dev \
            libsqlite3-dev \
            libtiff5-dev \
            libwebp-dev \
            libx11-dev \
            libxml2-dev \
            libxml2-utils \
            ninja-build \
            perl \
            po4a \
            python3-jsonschema \
            xsltproc \
            zlib1g-dev;
      - uses: actions/checkout@v3
        with:
          submodules: true
          path: src
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./src/.ci/ci-script.sh;
      - name: Check if it runs
        run: |
          ${INSTALL_PREFIX}/bin/darktable --version || true
          ${INSTALL_PREFIX}/bin/darktable-cli \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 "${SRC_DIR}/src/tests/integration/images/mire1.cr2" \
                 "${SRC_DIR}/src/tests/integration/0000-nop/nop.xmp" \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0
      - name: Run Integration test suite
        #integration test can get "stuck" plus there are couple of errors here, so it needs to be addressed first
        if: ${{ false }}
        run: |
          cd "${SRC_DIR}/src/tests/integration/"
          ./run.sh --no-opencl --no-deltae --fast-fail

  Win64:
    name: Win64.${{ matrix.compiler.compiler }}.${{ matrix.target }}.${{ matrix.btype }}.${{ matrix.generator }}
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        btype:
          - Debug
        compiler:
          - { compiler: GNU,  CC: gcc,   CXX: g++ }
        target:
          - skiptest
        generator:
          #- MSYS Makefiles
          - Ninja
        eco: [-DDONT_USE_INTERNAL_LIBRAW=ON]
    defaults:
      run:
        shell: msys2 {0}
    env:
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      ECO: ${{ matrix.eco }}
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      TARGET: ${{ matrix.target }}
      GENERATOR: ${{ matrix.generator }}
      # todo: use linker which supports --wrap, ld.bfd and ld.gold support it
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          install: >-
            base-devel
            git
            intltool
            po4a
          pacboy: >-
            cc:p
            cmake:p
            cmocka:p
            ninja:p
            nsis:p
            python-jsonschema:p
            dbus-glib:p
            drmingw:p
            exiv2:p
            gcc-libs:p
            gettext:p
            gmic:p
            graphicsmagick:p
            gtk3:p
            icu:p
            iso-codes:p
            lcms2:p
            lensfun:p
            libavif:p
            libexif:p
            libgphoto2:p
            libheif:p
            libjpeg-turbo:p
            libjxl:p
            libraw:p
            libsecret:p
            libtiff:p
            libwebp:p
            libxml2:p
            libxslt:p
            lua:p
            omp:p
            openexr:p
            openjpeg2:p
            osm-gps-map:p
            portmidi:p
            pugixml:p
            SDL2:p
            sqlite3:p
            zlib:p
          update: true
      - run: git config --global core.autocrlf input
        shell: bash
      - uses: actions/checkout@v3
        with:
          submodules: true
          path: src
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          $(cygpath ${SRC_DIR})/.ci/ci-script.sh
      - name: Check if it runs
        if: ${{success() && matrix.compiler.compiler == 'GNU' }} # LLVM build on windws for some reason breaks in imageio_rawspeed...
        run: |
          $(cygpath ${INSTALL_PREFIX})/bin/darktable.exe --version || true
          $(cygpath ${INSTALL_PREFIX})/bin/darktable-cli.exe --version || true
          echo "Testing RUN!"
          $(cygpath ${INSTALL_PREFIX})/bin/darktable-cli.exe \
                 --verbose \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 $(cygpath ${SRC_DIR})/src/tests/integration/images/mire1.cr2 \
                 $(cygpath ${SRC_DIR})/src/tests/integration/0000-nop/nop.xmp \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0

  macOS:
    name: macOS.${{ matrix.compiler.compiler }}.${{ matrix.build.xcode }}.${{ matrix.target }}.${{ matrix.generator }}
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: true
      matrix:
        build:
          - { os: macos-11,    xcode: 12.5.1, deployment: 11.3 }
          - { os: macos-11,    xcode: 13.2.1, deployment: 12.1 }
          - { os: macos-12,    xcode: 13.4,   deployment: 12.3 }
        compiler:
          - { compiler: XCode,   CC: cc, CXX: c++ }
        btype: [ Debug ]
        target:
          - skiptest
        generator:
          - Ninja
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.build.xcode }}.app/Contents/Developer
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.build.deployment }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: ${{ matrix.generator }}
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          path: src
      - name: Install Base Dependencies
        run: |
          brew update > /dev/null || true
          # brew upgrade || true        # no need for a very time-consuming upgrade of ALL packages
          brew tap Homebrew/bundle
          cd src/.ci
          export HOMEBREW_NO_INSTALL_UPGRADE=1
          brew bundle --verbose || true
          # handle keg-only libs
          brew link --force libomp
          brew link --force libsoup@2
      - name: Build and Install
          # todo: use linker which supports --wrap, ld.bfd and ld.gold support it
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./src/.ci/ci-script.sh;
      - name: Check if it runs
        run: |
          ${INSTALL_PREFIX}/bin/darktable --version || true
          ${INSTALL_PREFIX}/bin/darktable-cli \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 "${SRC_DIR}/src/tests/integration/images/mire1.cr2" \
                 "${SRC_DIR}/src/tests/integration/0000-nop/nop.xmp" \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0 || true # OpenMP builds crash for most configs
